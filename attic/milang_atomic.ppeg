%%@skip-on-include
atomic <- space / function_name / type_name / variable / infix / bindable_function_name ~;
%%@end-skip

space <- (whitespace / comment_line)+ ~;

whitespace <- [ \t\n\r] ~;

comment_line <- '-doc ' docstring:(!"\n" .)* `
	String = proplists:get_value(docstring, Node),
	{docstring, simple_idx(Idx), iolist_to_binary(String)}
`;

type_name <- head:upcase_name tail:('.' upcase_name)* `
	Head = proplists:get_value(head, Node),
	TailWithDots = proplists:get_value(tail, Node, []),
	Tail = [N || [_, N] <- TailWithDots],
	case Tail of
		[] ->
			{local_type_name, simple_idx(Idx), Head};
		_ ->
			ReversedTail = lists:reverse(Tail),
			{[LocalPart], ReversedRemoteTail} = lists:split(1, ReversedTail),
			RemoteParts = [Head | lists:reverse(ReversedRemoteTail)],
			RemotePart = iolist_to_binary(lists:join($., RemoteParts)),
			{remote_type_name, simple_idx(Idx), RemotePart, LocalPart}
	end
`;

module_name <- type_name `
	case Node of
		{_, SimpleIdx, N} ->
			{module_name, SimpleIdx, N};
		{_, SimpleIdx, Path, Local} ->
			{module_name, SimpleIdx, unicode:characters_to_binary([Path, $., Local])}
	end
`;

infix <- infix_notation / symbol ~;

symbol <- blessed_symbol / ( (blessed_symbol / '=') (blessed_symbol / '=')+ ) `
	Out = {function_symbol, simple_idx(Idx), unicode:characters_to_binary(Node)},
	log_rule(?FUNCTION_NAME, Node, Out, "", [])
`;
%symbol <- blessed_symbol+ `
%	log_rule(?FUNCTION_NAME, Node),
%	{function_symbol, simple_idx(Idx), unicode:characters_to_binary(Node)}
%`;

blessed_symbol <- '+' / '_' / '-' / '*' / '&' / '^' / '%' / '$' / '#' / '@' / '!' / '~' / '`' / '?' '>' / '<' / '/' ~;

%symbol <- solo_symbol / longer_symbol `
%	log_rule(?FUNCTION_NAME, Node),
%	Node
%`;
%
%solo_symbol <- (!(space / solo_reserved) . ) `
%	log_rule(?FUNCTION_NAME, Node),
%	{function_symbol, simple_idx(Idx), Node}
%`;
%
%solo_reserved <- '=' / ',' / '.' / '|' / '[' / ']' / '{' / '}' ~;
%
%longer_symbol <- (!(space / [A-Za-z0-9] )) (!(space / [A-Za-z0-9]) . )+ `
%	log_rule(?FUNCTION_NAME, Node),
%	{function_symbol, simple_idx(Idx), unicode:characters_to_binary(Node)}
%`;
%
%reserved_character <- "'" / ',' / '.' / '[' / ']' / '{' / '}'  ~;

infix_notation <- left_assoc / right_assoc ~;

left_assoc <- weight:'|'+ '>' name:(function_name / symbol)`
	WeightStr = proplists:get_value(weight, Node),
	Weight = length(WeightStr),
	OpName = proplists:get_value(name, Node),
	{left_assoc, simple_idx(Idx), Weight, OpName}
`;

right_assoc <- '<' weight:'|'+ name:(function_name / symbol)`
	WeightStr = proplists:get_value(weight, Node),
	Weight = length(WeightStr),
	OpName = proplists:get_value(name, Node),
	{right_assoc, simple_idx(Idx), Weight, OpName}
`;

function_name <- remote_function_name / local_function_name / symbol_as_function_name ~;

local_function_name <- downcase_name`
	{local_function_name, simple_idx(Idx), Node}
`;

remote_function_name <- module_name '.' downcase_name `
	[Module, _, Function] = Node,
	{remote_function_name, simple_idx(Idx), Module, Function}
`;

symbol_as_function_name <- "'" symbol "'" `
	[_, Out, _] = Node,
	Out
`;

bindable_function_name <- local_function_name / symbol_as_function_name ~;

variable <- downcase_name `
	{variable, simple_idx(Idx), Node}
`;

upcase_name <- [A-Z] [a-zA-Z_0-9]* `
	iolist_to_binary(Node)
`;

downcase_name <- [a-z] [A-Za-z_0-9]* `
	iolist_to_binary(Node)
`;

%%@append milang_helpers.hrl
